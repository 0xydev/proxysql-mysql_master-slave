# Önce mysql master servisini başlat
# - monitor_user ve monitor_password ile monitor kullanıcısı oluşturuyoruz.
# - proxysql

# ve ardından mysql slave servislerini oluşturuyoruz.
# Sonra proxysql ve phpmyadmin servislerini oluşturuyoruz.

services:
  setup:
    image: mysql:5.7
    hostname: setup
    container_name: setup
    restart: "no"
    entrypoint: /run.sh
    # entrypoint: tail -f /dev/null
    volumes:
      # Başlangıçta çalıştırılacak sql ve kabuk dosyalarını yükleyelim
      - ./run.sh:/run.sh
    environment:
      MYSQL_ROOT_PASSWORD: root_password
    depends_on:
      slave:
        condition: service_healthy

  master1:
    image: mysql:5.7
    hostname: master1
    container_name: master1
    restart: always
    # ports:
    #   - "3306:3306"
    #   - "24901:24901"
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=1
      --group_replication_local_address="master1:24901"
      --auto_increment_increment=1
      --auto_increment_offset=1
      --group_replication_auto_increment_increment=1
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - master1_data:/var/lib/mysql
      # Config dosyalarını yükleyelim
      - ./my.cnf:/etc/mysql/my.cnf:ro
      - ./1_network.cnf:/etc/mysql/conf.d/1_network.cnf:ro
      - ./2_group_replication.cnf:/etc/mysql/conf.d/2_group_replication.cnf:ro
      # - ./master1.cnf:/etc/mysql/conf.d/master.cnf
      # - ./log.cnf:/etc/mysql/conf.d/log.cnf
      # Başlangıçta çalıştırılacak sql ve kabuk dosyalarını yükleyelim
      # - ./1_create_users.sql:/docker-entrypoint-initdb.d/1_create_users.sql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: repl_user
      MYSQL_PASSWORD: repl_pass123
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  master2:
    image: mysql:5.7
    hostname: master2
    container_name: master2
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=2
      --group_replication_local_address="master2:24902"
      --auto_increment_increment=1
      --auto_increment_offset=1
      --group_replication_auto_increment_increment=1
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - master2_data:/var/lib/mysql
      # Config dosyalarını yükleyelim
      - ./my.cnf:/etc/mysql/my.cnf:ro
      - ./1_network.cnf:/etc/mysql/conf.d/1_network.cnf:ro
      - ./2_group_replication.cnf:/etc/mysql/conf.d/2_group_replication.cnf:ro
      # - ./master2.cnf:/etc/mysql/conf.d/master.cnf
      # - ./log.cnf:/etc/mysql/conf.d/log.cnf
      # Başlangıçta çalıştırılacak sql ve kabuk dosyalarını yükleyelim
      # - ./1_create_users.sql:/docker-entrypoint-initdb.d/1_create_users.sql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: repl_user
      MYSQL_PASSWORD: repl_pass123
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      master1:
        condition: service_healthy

  master3:
    image: mysql:5.7
    hostname: master3
    container_name: master3
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=3
      --group_replication_local_address="master3:24903"
      --read_only=1
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - master3_data:/var/lib/mysql
      # Config dosyalarını yükleyelim
      - ./my.cnf:/etc/mysql/my.cnf:ro
      - ./1_network.cnf:/etc/mysql/conf.d/1_network.cnf:ro
      - ./2_group_replication.cnf:/etc/mysql/conf.d/2_group_replication.cnf:ro
      # - ./master3.cnf:/etc/mysql/conf.d/master.cnf
      # - ./log.cnf:/etc/mysql/conf.d/log.cnf
      # Başlangıçta çalıştırılacak sql ve kabuk dosyalarını yükleyelim
      # - ./1_create_users.sql:/docker-entrypoint-initdb.d/1_create_users.sql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: repl_user
      MYSQL_PASSWORD: repl_pass123
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      master2:
        condition: service_healthy

  slave:
    image: mysql:5.7
    hostname: slave
    container_name: slave
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=4
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./my.cnf:/etc/mysql/my.cnf:ro
      - ./1_network.cnf:/etc/mysql/conf.d/1_network.cnf:ro
      - ./slave.cnf:/etc/mysql/conf.d/slave.cnf:ro
      - slave_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: repl_user
      MYSQL_PASSWORD: repl_pass123
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      master3:
        condition: service_healthy

  proxysql:
    image: proxysql/proxysql:2.5.5
    container_name: proxysql
    hostname: proxysql
    ports:
      - "6032:6032"  # Admin port
      - "6033:6033"  # MySQL port
    volumes:
      - ./proxysql.cnf:/etc/proxysql.cnf:ro
      - ./proxysql_init.sql:/etc/proxysql_init.sql:ro
    healthcheck:
      test: ["CMD", "mysql", "-h", "127.0.0.1", "-P", "6032", "-u", "admin", "-padmin", "-e", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      master1:
        condition: service_healthy
      master2:
        condition: service_healthy
      master3:
        condition: service_healthy
      slave:
        condition: service_healthy

  redmine:
    image: redmine:5.0.2
    restart: unless-stopped
    container_name: redmine
    hostname: redmine
    ports:
      - "3000:3000"
    environment:
      REDMINE_DB_WAIT: 80
      REDMINE_DB_POOL: 20
      REDMINE_DB_MYSQL: master1
      REDMINE_DB_HOST: master1
      REDMINE_DB_PORT: 3306
      REDMINE_DB_USERNAME: redmine
      REDMINE_DB_PASSWORD: redmine_password
      REDMINE_DB_DATABASE: redmine
      TZ: Europe/Istanbul
      RAILS_ENV: production
      REDMINE_NO_DB_MIGRATE: "false"
      REDMINE_LANG: tr
      SECRET_KEY_BASE: "some_long_random_string_at_least_32_chars"
      REDMINE_SESSION_LIFETIME: "86400"  # 24 saat
      REDMINE_SESSION_TIMEOUT: "0"       # Oturum zaman aşımını devre dışı bırak
      REDMINE_AUTOLOGIN: "true"         # Otomatik giriş aktif
    volumes:
      - redmine_files:/usr/src/redmine/files
      - redmine_db:/usr/src/redmine/db
    command: >
      bash -c "
        rm -f /usr/src/redmine/tmp/pids/server.pid &&
        echo 'production:
          adapter: mysql2
          database: redmine
          host: master1
          port: 3306
          username: redmine
          password: redmine_password
          encoding: utf8mb4' > /usr/src/redmine/config/database.yml &&
        bundle exec rake db:migrate:reset &&
        bundle exec rake db:migrate &&
        echo tr | bundle exec rake redmine:load_default_data &&
        bundle exec rake generate_secret_token &&
        echo 'production:
          session_store: active_record_store
          session_lifetime: 86400
          session_timeout: 0
          autologin: true' > config/configuration.yml &&
        cp /usr/src/redmine/config/database.yml /usr/src/redmine/config/database.yml.bak &&
        echo 'production:
          adapter: mysql2
          database: redmine
          host: proxysql
          port: 6033
          username: redmine
          password: redmine_password
          encoding: utf8mb4' > /usr/src/redmine/config/database.yml &&
        rails server -b 0.0.0.0"
    depends_on:
      setup:
        condition: service_completed_successfully
      master1:
        condition: service_healthy

volumes:
  master1_data:
  master2_data:
  master3_data:
  slave_data:
  redmine_files:
  redmine_db:

networks:
  mysql_network:
    name: mysql_network
    driver: bridge
